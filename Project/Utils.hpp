#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <string>
#include <memory>
#include <iomanip>
#include <stdio.h>
#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

uint8_t     AsciToint                (const char v_asci);
uint64_t    Pack8In64Bits            (const uint8_t * const vData);
uint8_t     HexInAsciToInt           (const char vHexInAsci [2]);
void        Unpack32In8Bits          (const uint32_t vValue, uint8_t * const vData);
std::string ConvertBinaryToHexString (std::string_view vData);
std::string ConvertHexStringToBinary (std::string_view vData);

template <class... TArgs>
std::string Format (const std::string & vData, const TArgs &... vArgs)
{
    size_t size = snprintf (nullptr, 0, vData.c_str (), vArgs...) + 1;
    std::unique_ptr <char []> buf (new char [size]);
    size_t written = snprintf (buf.get (), size, vData.c_str (), vArgs...);
    if (written <= 0) { return {}; }

    return std::string (buf.get (), buf.get () + size - 1);
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////