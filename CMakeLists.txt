PROJECT(Template)
CMAKE_MINIMUM_REQUIRED(VERSION 3.16)

SET                   (ProjectName Project)
SET                   (TestsName   Tests)
SET                   (LibraryName ${CMAKE_PROJECT_NAME}Lib)
SET                   (ConanLibraryPath "C:/Users/sitko/.conan/data")
SET                   (CurrentPath ${CMAKE_CURRENT_SOURCE_DIR})
GET_FILENAME_COMPONENT(ParentPath  ${CurrentPath} PATH)

IF(EXISTS ${ParentPath}/conanbuildinfo.cmake)
	INCLUDE(${ParentPath}/conanbuildinfo.cmake)
ELSE()
	INCLUDE(${CurrentPath}/Conan/conanbuildinfo.cmake)
ENDIF()

CONAN_BASIC_SETUP()

SET (ProjectIncludePath                  ${CurrentPath}/${ProjectName})
FILE(GLOB_RECURSE ProjectFilesInclude    ${ProjectIncludePath}/*.h ${ProjectIncludePath}/*.hxx)
FILE(GLOB_RECURSE ProjectFilesAndFolders ${ProjectIncludePath}/*)

SET (TestIncludePath                     ${CurrentPath}/${TestsName})
FILE(GLOB_RECURSE TestFilesInclude       ${TestIncludePath}/*.h ${TestIncludePath}/*.hxx)
FILE(GLOB_RECURSE TestFilesAndFolders    ${TestIncludePath}/*)

MACRO(GET_SUBDIRECTORIES_PATHS_LISTS main_subdirectory_path subdirectories_paths_lists)
    SET(directoryPathsLists "")
    FOREACH(subdirectoryPath ${main_subdirectory_path})
        GET_FILENAME_COMPONENT(directoryPath ${subdirectoryPath} PATH)
        SET(directoryPathsLists ${directoryPathsLists} ${directoryPath})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES directoryPathsLists)
    SET(${subdirectories_paths_lists} ${directoryPathsLists})
ENDMACRO()

SET(ProjectSubdirectoriesPathsLists "")
GET_SUBDIRECTORIES_PATHS_LISTS("${ProjectFilesAndFolders}" ProjectSubdirectoriesPathsLists)

SET(TestSubdirectoriesPathsLists "")
GET_SUBDIRECTORIES_PATHS_LISTS("${TestFilesAndFolders}" TestSubdirectoriesPathsLists)

MACRO(REMOVE_FILES directory)
	FILE(GLOB removeLists ${directory}/*)
	FOREACH(FILE ${removeLists})
		IF(EXISTS ${file})
			FILE(REMOVE ${file})
		ENDIF()
	ENDFOREACH(FILE)
ENDMACRO()

SET(BuildPath ${CurrentPath}/Build)
REMOVE_FILES("${BuildPath}")

MACRO(GET_LIBRARIES_PATHS_LISTS libraries_paths_lists)
    SET(libraryPathsLists "")
    FOREACH(library ${CONAN_LIBS})
        SET(libraryPathsLists ${libraryPathsLists} ${ConanLibraryPath}/${library})
    ENDFOREACH()
    SET(${libraries_paths_lists} ${libraryPathsLists})
ENDMACRO()

SET(LibrariesPathsLists "")
IF (NOT CONAN_LIBS STREQUAL "")
	GET_LIBRARIES_PATHS_LISTS(LibrariesPathsLists)
ENDIF()

SOURCE_GROUP               (TREE                       	      ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
ADD_EXECUTABLE             (${ProjectName}                    ${ProjectFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${ProjectName} PUBLIC             ${ProjectSubdirectoriesPathsLists})
TARGET_LINK_LIBRARIES      (${ProjectName}                    ${PackagesLibsNames})
TARGET_COMPILE_FEATURES    (${ProjectName} PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                       	      ${TestIncludePath} PREFIX "" FILES ${TestFilesAndFolders})
LINK_DIRECTORIES           (${TestsName}                      ${BuildPath}/lib)
ADD_EXECUTABLE             (${TestsName}                      ${TestFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${TestsName}   PUBLIC             ${ProjectSubdirectoriesPathsLists} ${TestSubdirectoriesPathsLists})
TARGET_LINK_LIBRARIES      (${TestsName}    		          ${LibraryName} ${PackagesLibsNames})
TARGET_COMPILE_FEATURES    (${TestsName}   PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                       	      ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
ADD_LIBRARY                (${LibraryName} STATIC             ${ProjectFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${LibraryName} PUBLIC             ${ProjectSubdirectoriesPathsLists})
TARGET_LINK_LIBRARIES      (${LibraryName}    		          ${CONAN_LIBS_GTEST})
TARGET_COMPILE_FEATURES    (${LibraryName} PUBLIC cxx_std_17)
